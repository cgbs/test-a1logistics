Важно! чтобы вы не занимались установкой и не ждали загрузки данных через API, поднял тестовый проект тут:

http://95.46.44.111:86/
Учетные данные, такие же будут и если установите у себя:
	test@test.com
	q1w2e3
	
В этой тестовой версии данные уже загружены, можно просто покликать, построить данные.

Инструкция по установке  и запуску:
1. Клоним репозиторий https://github.com/cgbs/test-a1logistics
2. переходим в папку source
2. composer install
3. конфигуриуем БД mysql (например в файле env, или в конфиг файле) 
4. php artisan migrate
5. php artisan db:seed
6. php artisan serve 

В самом интерфейсе графики будут не доступны пока не будут загружены данные, 
данные грузятся с разной скоростью, у меня получалось где-то год=минута.
После загрузки данных можно строить графики

Описание задачи(может быть излишне подробное), и как что работет:

За основу постройки графиков я взял данные с оф. сервера НБУ по истории курсов валют. 
Всего набралось порядка 420 тысяч записей, больше информации там брать не откуда, это и так курсы за 20 лет.

Загрузка выполняется в JSON формате, с последующим парсингом и записью в БД.
Класс загрузчика NBUDataLoader(в самом файле так же есть комментарии по коду), 
его вызывает NBUDataLoaderController.
Так как API нбу может выдать данные только по одному заданому дню, я использовал multi-curl, для 30-ти парралельных потоков.

Процесес следующий:
1. Загрузка файлов дня в storage/app/NBUData/
2. Парсинг этого файла и запись в таблицы бд.
3. Во время загрузки диапазон разбивается яваскриптом на переоды по месяцу, и грузит их последовательными ajax-запросами, обновляя данные в диалоге загрузки,
тем самым пользователь может наблюдать процесс/прогресс загрузки.  

По БД:
1. banks			-	инфо о банке, он всего один, НБУ
2. currency 		-	инфо о валюте
3. currency_rates	-	инфо у курсе каждой валюты на день, внешний ключ на таблицу валют.


Графики:
Для отрисовки графиков используется Google Charts, 
1. Сильно в этих данных не разбежаться, поэтому сделал всего 2 типа графиков, линейный и колонки.
2. Можно так же выбрать список валют для отображения
3. И временной период группировки данных, год/месяц/день/квартал

За выдачу данныз в гугл-чарты отвечает контроллер AnalyticsController
1. getDBData					-	формирует запросы в БД
2. convertAssocToGoogleChart	-	меняет структуру данных полученных из БД на структуру которая нужна гугл-чартам
3. BuildChartJSON				-	выдает результат

По JS:
Js кода не много, он весь в common.js, так же подключены несколько библиотек для интерфейса






